flowers <- filter_species(s, 1.5)
print(paste("Number of flowers for", s, "=", nrow(flowers)))
} # had incorrect column name, should be Species with a capital S
#Make comments about the flaws so you remember if you stumble upon them agian
median_sepal <- median(iris$Sepal.Length) # had incorrect function name, should be median()
subset_flowers <- subset(iris, Sepal.Length > median_sepal & Petal.Width < 1.5 & Species == "setosa") # had incorrect logical operator, should be & instead of &&
max_length <- max(subset_flowers$Sepal.Length) # was missing closing parenthesis
min_length <- min(subset_flowers$Sepal.Length) # had incorrect function name, should be min()
mean_petals <- mean(subset_flowers$Petal.Length) # had incorrect argument order, should be mean(subset_flowers$Petal.Length)
max_length
min_length
mean_petals
subset_flowers
median = median(iris$Sepal.Length)
median
median = median(iris$Sepal.Length)
median
range(iris$Sepal.Length)
range(iris$Petal.Length)
range(iris$Petal.Length & species == "setosa"))
range(iris$Petal.Length[iris$Species == "setosa"])
subset_flowers <- subset(iris, Sepal.Length > median & Petal.Width < 1.5 & Species == "setosa")
subset_flowers
range(iris$Petal.Length[iris$Species == "setosa"])
#Make comments about the flaws so you remember if you stumble upon them agian
median_sepal <- median(iris$Sepal.Length) # had incorrect function name, should be median()
subset_flowers <- subset(iris, Sepal.Length > median_sepal & Petal.Width < 1.5 & Species == "setosa") # had incorrect logical operator, should be & instead of &&
max_length <- max(subset_flowers$Sepal.Length) # was missing closing parenthesis
min_length <- min(subset_flowers$Sepal.Length) # had incorrect function name, should be min()
mean_petals <- mean(subset_flowers$Petal.Length) # had incorrect argument order, should be mean(subset_flowers$Petal.Length)
max_length
min_length
mean_petals
subset_flowers
#double checking why is the dataframe empty
median = median(iris$Sepal.Length)
median
range(iris$Sepal.Length)
range(iris$Petal.Length[iris$Species == "setosa"])
subset_flowers <- subset(iris, Sepal.Length > median & Petal.Width < 1.5)
subset_flowers
#Make comments about the flaws so you remember if you stumble upon them agian
median_sepal <- median(iris$Sepal.Length) # had incorrect function name, should be median()
subset_flowers <- subset(iris, Sepal.Length > median_sepal & Petal.Width < 1.5 & Species == "setosa") # had incorrect logical operator, should be & instead of &&
max_length <- max(subset_flowers$Sepal.Length) # was missing closing parenthesis
min_length <- min(subset_flowers$Sepal.Length) # had incorrect function name, should be min()
mean_petals <- mean(subset_flowers$Petal.Length) # had incorrect argument order, should be mean(subset_flowers$Petal.Length)
max_length
min_length
mean_petals
subset_flowers
#double checking why is the dataframe empty
median = median(iris$Sepal.Length)
median
range(iris$Sepal.Length)
range(iris$Petal.Length[iris$Species == "setosa"])
subset_flowers_all <- subset(iris, Sepal.Length > median & Petal.Width < 1.5)
subset_flowers_all
subset_flowers_all[0:3]
subset_flowers_all[0:3]
subset_flowers_all[3:]
#Make comments about the flaws so you remember if you stumble upon them agian
median_sepal <- median(iris$Sepal.Length) # had incorrect function name, should be median()
subset_flowers <- subset(iris, Sepal.Length > median_sepal & Petal.Width < 1.5 & Species == "setosa") # had incorrect logical operator, should be & instead of &&
max_length <- max(subset_flowers$Sepal.Length) # was missing closing parenthesis
min_length <- min(subset_flowers$Sepal.Length) # had incorrect function name, should be min()
mean_petals <- mean(subset_flowers$Petal.Length) # had incorrect argument order, should be mean(subset_flowers$Petal.Length)
max_length
min_length
mean_petals
subset_flowers
#double checking why is the dataframe empty
median = median(iris$Sepal.Length)
median
range(iris$Sepal.Length)
range(iris$Petal.Length[iris$Species == "setosa"])
subset_flowers_all <- subset(iris, Sepal.Length > median & Petal.Width < 1.5)
subset_flowers_all[3: ]
#Make comments about the flaws so you remember if you stumble upon them agian
median_sepal <- median(iris$Sepal.Length) # had incorrect function name, should be median()
subset_flowers <- subset(iris, Sepal.Length > median_sepal & Petal.Width < 1.5 & Species == "setosa") # had incorrect logical operator, should be & instead of &&
max_length <- max(subset_flowers$Sepal.Length) # was missing closing parenthesis
min_length <- min(subset_flowers$Sepal.Length) # had incorrect function name, should be min()
mean_petals <- mean(subset_flowers$Petal.Length) # had incorrect argument order, should be mean(subset_flowers$Petal.Length)
max_length
min_length
mean_petals
subset_flowers
#double checking why is the dataframe empty
median = median(iris$Sepal.Length)
median
range(iris$Sepal.Length)
range(iris$Petal.Length[iris$Species == "setosa"])
subset_flowers_all <- subset(iris, Sepal.Length > median & Petal.Width < 1.5)
subset_flowers_all[3: 5]
knitr::opts_chunk$set(echo = TRUE)
# Install pacman first (only once):
install.packages("pacman")
# Load and install packages:
pacman::p_load(ggplot2, dplyr, tidyr) #So it installs the library if needed + imports it in one step.
install.packages("pacman")
df_lcs <- as.data.frame(LifeCycleSavings)
head(df_lcs)
# Now we plot the histograms of the savings ratio and the disposable income
# Savings Ratio
ggplot(df_lcs, aes(x = sr)) + # Here we specify the aesthetics (Which is "just" specifying the x and potentially the y axis.)
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightblue", color = "black") + # Here we specify the type of plot and that it should be a density plot.
geom_density(color = "red", size = 1) +
labs(title = "Distribution of Savings Ratio (sr)", x = "Savings Ratio", y = "Density") # And we give it a title and some axis names
#Disposable income
ggplot(df_lcs, aes(x = dpi)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightgreen", color = "black") +
geom_density(color = "red", size = 1) +
labs(title = "Distribution of Disposable Income (dpi)", x = "Disposable Income", y = "Density")
# Now we plot the histograms of the savings ratio and the disposable income
# Savings Ratio
ggplot(df_lcs, aes(x = sr)) + # Here we specify the aesthetics (Which is "just" specifying the x and potentially the y axis.)
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightblue", color = "black") + # Here we specify the type of plot and that it should be a density plot.
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of Savings Ratio (sr)", x = "Savings Ratio", y = "Density") # And we give it a title and some axis names
#Disposable income
ggplot(df_lcs, aes(x = dpi)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightgreen", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of Disposable Income (dpi)", x = "Disposable Income", y = "Density")
# Now we plot the QQ-plots of the savings ratio and the disposable income
ggplot(df_lcs, aes(sample = sr)) + #For qq-plots we specify a 'sample' instead of an x or y axis
stat_qq(color = "blue") + # Colours
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Savings Ratio (sr)")
ggplot(df_lcs, aes(sample = dpi)) +
stat_qq(color = "darkgreen") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Disposable Income (dpi)")
shapiro.test(df_lcs$sr)
shapiro.test(df_lcs$dpi)
# Log transformation
df_lcs$log_dpi <- log(df_lcs$dpi)
# Sqrt transformation
df_lcs$sqrt_dpi <- sqrt(df_lcs$dpi)
#plot it
ggplot(df_lcs, aes(x = log_dpi)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightgreen", color = "black") +
geom_density(color = "red", size = 1) +
labs(title = "Distribution of Disposable Income (dpi)", x = "Disposable Income", y = "Density")
ggplot(df_lcs, aes(x = sqrt_dpi)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightgreen", color = "black") +
geom_density(color = "red", size = 1) +
labs(title = "Distribution of Disposable Income (dpi)", x = "Disposable Income", y = "Density")
# test both
shapiro.test(df_lcs$log_dpi)
shapiro.test(df_lcs$sqrt_dpi)
# This is how you standardize the data (transform to z-scores)
scaled_data <- scale(df_lcs)
head(scaled_data)
# Pearsons correlation - Assumes normality
cor.test(df_lcs$sr, df_lcs$dpi, method = "pearson")
cor.test(df_lcs$sr, df_lcs$dpi, method = "spearman")
df_states <- as.data.frame(state.x77)
head(df_states)
# define variables
life_exp <- df_states$"Life Exp"
illiteracy <- df_states$Illiteracy
# define variables
life_exp <- df_states$"Life Exp"
illiteracy <- df_states$Illiteracy
# look at distributions
# Histograms
ggplot(df_states, aes(x = life_exp)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "darkorange", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Life Expectancy", x = "Life Expectancy", y = "Density")
ggplot(df_states, aes(x = illiteracy)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Illiteracy", x = "Illiteracy", y = "Density")
# QQ-plots
ggplot(df_states, aes(sample = life_exp)) +
stat_qq(color = "darkorange") +
stat_qq_line(color = "black") +
labs(title = "Q-Q Plot: Life Expectancy")
ggplot(df_states, aes(sample = illiteracy)) +
stat_qq(color = "seagreen3") +
stat_qq_line(color = "black") +
labs(title = "Q-Q Plot: Illiteracy")
# define variables
life_exp <- df_states$"Life Exp"
illiteracy <- df_states$Illiteracy
# look at distributions
# Histograms
ggplot(df_states, aes(x = df_states$"Life Exp")) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "darkorange", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Life Expectancy", x = "Life Expectancy", y = "Density")
ggplot(df_states, aes(x = illiteracy)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Illiteracy", x = "Illiteracy", y = "Density")
# define variables
life_exp <- df_states$"Life Exp"
illiteracy <- df_states$Illiteracy
# look at distributions
# Histograms
ggplot(df_states, aes(x = df_states$`Life Exp`)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "darkorange", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Life Expectancy", x = "Life Expectancy", y = "Density")
ggplot(df_states, aes(x = illiteracy)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Illiteracy", x = "Illiteracy", y = "Density")
# define variables
life_exp <- df_states$`Life Exp`
illiteracy <- df_states$Illiteracy
# look at distributions
# Histograms
ggplot(df_states, aes(x = life_exp)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "darkorange", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Life Expectancy", x = "Life Expectancy", y = "Density")
ggplot(df_states, aes(x = illiteracy)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Illiteracy", x = "Illiteracy", y = "Density")
# QQ-plots
ggplot(df_states, aes(sample = life_exp)) +
stat_qq(color = "darkorange") +
stat_qq_line(color = "black") +
labs(title = "Q-Q Plot: Life Expectancy")
ggplot(df_states, aes(sample = illiteracy)) +
stat_qq(color = "seagreen3") +
stat_qq_line(color = "black") +
labs(title = "Q-Q Plot: Illiteracy")
# saphiro-wilk test
shapiro.test(life_exp)
shapiro.test(illiteracy)
#trying to transform the illiteracy variable
# Log transformation
log_illiteracy <- log(illiteracy)
# Sqrt transformation
sqrt_illiteracy <- sqrt(illiteracy)
#plot it
ggplot(data.frame(log_illiteracy), aes(x = log_illiteracy))
+
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Log-Transformed Illiteracy", x = "Log-Transformed Illiteracy", y = "Density")
#trying to transform the illiteracy variable
# Log transformation
log_illiteracy <- log(illiteracy)
# Sqrt transformation
sqrt_illiteracy <- sqrt(illiteracy)
#plot it
ggplot(data.frame(log_illiteracy), aes(x = log_illiteracy)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Log-Transformed Illiteracy", x = "Log-Transformed Illiteracy", y = "Density")
ggplot(data.frame(sqrt_illiteracy), aes(x = sqrt_illiteracy)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "seagreen3", color = "black") +
geom_density(color = "black", size = 1) +
labs(title = "Distribution of Sqrt-Transformed Illiteracy", x = "Sqrt-Transformed Illiteracy", y = "Density")
# test both
shapiro.test(log_illiteracy)
shapiro.test(sqrt_illiteracy)
#correlation tests
# Pearson correlation
cor.test(life_exp, log_illiteracy, method = "pearson")
# Spearman correlation
cor.test(life_exp, illiteracy, method = "spearman")
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
pacman::p_load(ggplot2, dplyr, tidyr, dslabs)
data("divorce_margarine")
head(divorce_margarine)
df <- data("divorce_margarine")
head(df)
df <- as.data.frame("divorce_margarine")
head(df)
df <- as.data.frame(divorce_margarine)
head(df)
#normality checks
ggplot(df, aes(x = divorce_rate_maine)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "palevioletred", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of divorce rate in Maine", x = "Divorce Rate", y = "Density")
#normality checks
ggplot(df, aes(x = divorce_rate_maine)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "palevioletred", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of divorce rate in Maine", x = "Divorce Rate", y = "Density")
ggplot(df, aes(x = margarine_consumption)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "goldenrod1", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of margarine consumption", x = "Margarine Consumption", y = "Density")
#normality checks
ggplot(df, aes(x = divorce_rate_maine)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "palevioletred", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of divorce rate in Maine", x = "Divorce Rate", y = "Density")
ggplot(df, aes(x = margarine_consumption_per_capita)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "goldenrod1", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of margarine consumption", x = "Margarine Consumption", y = "Density")
ggplot(df, aes(sample = divorce_rate_maine)) +
stat_qq(color = "palevioletred") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Divorce Rate Maine")
#normality checks
ggplot(df, aes(x = divorce_rate_maine)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "palevioletred", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of divorce rate in Maine", x = "Divorce Rate", y = "Density")
ggplot(df, aes(x = margarine_consumption_per_capita)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "goldenrod1", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of margarine consumption", x = "Margarine Consumption", y = "Density")
ggplot(df, aes(sample = divorce_rate_maine)) +
stat_qq(color = "palevioletred") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Divorce Rate Maine")
ggplot(df, aes(sample = margarine_consumption_per_capita)) +
stat_qq(color = "goldenrod1") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Margarine Consumption")
shapiro.test(df$divorce_rate_maine)
shapiro.test(df$margarine_consumption_per_capita)
View(df)
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
pacman::p_load(ggplot2, dplyr, tidyr, dslabs, car)
#subsetting
df2 <- df2 %>%
filter(year == 1978) %>%
drop_na()
df2 <- as.data.frame(car::GSSvocab)
df2 <- as.data.frame(GSSvocab)
#subsetting
df2 <- df2 %>%
filter(year == 1978) %>%
drop_na()
View(df2)
head(df2)
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_point(aes(y = divorce_rate_maine, color = "Divorce Rate in Maine"), size = 2) +
geom_point(aes(y = margarine_consumption_per_capita, color = "Margarine Consumption per Capita"), size = 2) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred", "Margarine Consumption per Capita" = "goldenrod1")) +
labs(title = "Divorce Rate in Maine and Margarine Consumption per Capita (2000-2009)", x = "Year") +
theme_minimal() +
theme(legend.title = element_blank(), legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_line(aes(y = scale(divorce_rate_maine), color = "Divorce Rate in Maine"), linewidth = 1.2) +
geom_line(aes(y = scale(margarine_consumption_per_capita), color = "Margarine Consumption per Capita"), linewidth = 1.2) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred",
"Margarine Consumption per Capita" = "goldenrod1")) +
labs(title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)") +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(),
legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_line(aes(y = scale(divorce_rate_maine), color = "Divorce Rate in Maine"), linewidth = 1.2) +
geom_line(aes(y = scale(margarine_consumption_per_capita), color = "Margarine Consumption per Capita"), linewidth = 1.2) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred",
"Margarine Consumption per Capita" = "goldenrod1")) +
labs(title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized values for comparison",
x = "Year", y = "Standardized Value (z)") +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(),
legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_point(aes(y = scale(divorce_rate_maine), color = "Divorce Rate in Maine"), size = 3) +
geom_point(aes(y = scale(margarine_consumption_per_capita), color = "Margarine Consumption per Capita"), size = 3) +
scale_x_continuous(breaks = 2000:2009) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred",
"Margarine Consumption per Capita" = "goldenrod1")) +
labs(
title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)"
) +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(), legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_point(aes(y = scale(divorce_rate_maine), color = "palevioletred"), size = 3) +
geom_point(aes(y = scale(margarine_consumption_per_capita), color = "goldenrod1"), size = 3) +
scale_x_continuous(breaks = 2000:2009) +
labs(
title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)"
) +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(), legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_point(aes(y = scale(divorce_rate_maine), fill = "palevioletred"), size = 3) +
geom_point(aes(y = scale(margarine_consumption_per_capita), fill = "goldenrod1"), size = 3) +
scale_x_continuous(breaks = 2000:2009) +
labs(
title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)"
) +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(), legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_point(aes(y = scale(divorce_rate_maine), color = "Divorce Rate in Maine"), size = 3) +
geom_point(aes(y = scale(margarine_consumption_per_capita), color = "Margarine Consumption per Capita"), size = 3) +
scale_x_continuous(breaks = 2000:2009) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred",
"Margarine Consumption per Capita" = "goldenrod1")) +
labs(
title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)"
) +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(), legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_line(aes(y = scale(divorce_rate_maine), color = "Divorce Rate in Maine"), size = 3) +
geom_line(aes(y = scale(margarine_consumption_per_capita), color = "Margarine Consumption per Capita"), size = 3) +
scale_x_continuous(breaks = 2000:2009) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred",
"Margarine Consumption per Capita" = "goldenrod1")) +
labs(
title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)"
) +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(), legend.position = "top")
cor.test(df$divorce_rate_maine, df$margarine_consumption_per_capita, method = "pearson")
#visualise both variables on one plot by year
ggplot(df, aes(x = year)) +
geom_line(aes(y = scale(divorce_rate_maine), color = "Divorce Rate in Maine"), size = 1) +
geom_line(aes(y = scale(margarine_consumption_per_capita), color = "Margarine Consumption per Capita"), size = 1) +
scale_x_continuous(breaks = 2000:2009) +
scale_color_manual(values = c("Divorce Rate in Maine" = "palevioletred",
"Margarine Consumption per Capita" = "goldenrod1")) +
labs(
title = "Divorce Rate and Margarine Consumption in Maine (2000–2009)",
subtitle = "Standardized (z-score) values for comparison",
x = "Year", y = "Standardized Value (z)"
) +
theme_minimal(base_size = 13) +
theme(legend.title = element_blank(), legend.position = "top")
#normality checks
ggplot(df2, aes(x = vocab)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightblue", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of Vocabulary Test Scores", x = "Vocabulary Test Score", y = "Density")
ggplot(df2, aes(sample = vocab)) +
stat_qq(color = "lightblue") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Vocabulary Test Scores")
ggplot(df2, aes(x = educ)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightgreen", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of Years of Education", x = "Years of Education", y = "Density")
ggplot(df2, aes(sample = educ)) +
stat_qq(color = "lightgreen") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Years of Education")
shapiro.test(df2$vocab)
shapiro.test(df2$educ)
#normality checks
ggplot(df2, aes(x = vocab)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightblue", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of Vocabulary Test Scores", x = "Vocabulary Test Score", y = "Density")
ggplot(df2, aes(sample = vocab)) +
stat_qq(color = "lightblue") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Vocabulary Test Scores")
ggplot(df2, aes(x = educ)) +
geom_histogram(aes(y = ..density..), bins = 15, fill = "lightgreen", color = "black") +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribution of Years of Education", x = "Years of Education", y = "Density")
ggplot(df2, aes(sample = educ)) +
stat_qq(color = "lightgreen") +
stat_qq_line(color = "red") +
labs(title = "Q-Q Plot: Years of Education")
shapiro.test(df2$vocab)
shapiro.test(df2$educ)
#checking types of variables
str(df2)
round(pastecs::stat.desc(df$margarine_consumption_per_capita),2)
pacman::p_load(ggplot2, dplyr, tidyr, dslabs, car, pastecs))
pacman::p_load(ggplot2, dplyr, tidyr, dslabs, car, pastecs)
shapiro.test(df$divorce_rate_maine)
shapiro.test(df$margarine_consumption_per_capita)
round(pastecs::stat.desc(df$divorce_rate_maine),2)
round(pastecs::stat.desc(df$margarine_consumption_per_capita),2)
shapiro.test(df$divorce_rate_maine)
shapiro.test(df$margarine_consumption_per_capita)
round(pastecs::stat.desc(cbind(df$divorce_rate_maine, df$margarine_consumption_per_capita), basic = FALSE, norm = TRUE), digits = 2)
